# Script de D√©ploiement VITRINE
# Automatise le d√©ploiement sur GitHub Pages

param(
    [string]$RepositoryName = "vitrine-av-uqam",
    [string]$GitHubUsername = "VOTRE_USERNAME",
    [string]$CommitMessage = "Update VITRINE - $(Get-Date -Format 'yyyy-MM-dd HH:mm')"
)

Write-Host "üöÄ D√âPLOIEMENT VITRINE" -ForegroundColor Cyan
Write-Host "=====================" -ForegroundColor Cyan

# V√©rifier que nous sommes dans le bon r√©pertoire
$currentDir = Get-Location
Write-Host "üìÅ R√©pertoire actuel: $currentDir" -ForegroundColor Yellow

# V√©rifier que Git est install√©
try {
    $gitVersion = git --version
    Write-Host "‚úÖ Git d√©tect√©: $gitVersion" -ForegroundColor Green
} catch {
    Write-Host "‚ùå Git non trouv√©. Veuillez installer Git." -ForegroundColor Red
    exit 1
}

# V√©rifier l'√©tat du repository
Write-Host "`nüîç V√©rification du repository..." -ForegroundColor Green

if (Test-Path ".git") {
    Write-Host "‚úÖ Repository Git existant" -ForegroundColor Green
    
    # V√©rifier le remote
    $remote = git remote get-url origin 2>$null
    if ($remote) {
        Write-Host "‚úÖ Remote configur√©: $remote" -ForegroundColor Green
    } else {
        Write-Host "‚ö†Ô∏è Aucun remote configur√©" -ForegroundColor Yellow
        $setupRemote = Read-Host "Voulez-vous configurer le remote GitHub? (y/n)"
        if ($setupRemote -eq "y") {
            $remoteUrl = "https://github.com/$GitHubUsername/$RepositoryName.git"
            git remote add origin $remoteUrl
            Write-Host "‚úÖ Remote ajout√©: $remoteUrl" -ForegroundColor Green
        }
    }
} else {
    Write-Host "‚ùå Pas de repository Git" -ForegroundColor Red
    $initRepo = Read-Host "Voulez-vous initialiser un repository Git? (y/n)"
    if ($initRepo -eq "y") {
        git init
        Write-Host "‚úÖ Repository Git initialis√©" -ForegroundColor Green
    } else {
        Write-Host "‚ùå Impossible de continuer sans repository Git" -ForegroundColor Red
        exit 1
    }
}

# V√©rifier les fichiers √† d√©ployer
Write-Host "`nüìã V√©rification des fichiers..." -ForegroundColor Green
$requiredFiles = @(
    "index.html",
    "test-simple.html",
    "test-banners.html",
    "css/main.css",
    "css/banners.css",
    "css/components.css",
    "js/config.js",
    "js/utils.js",
    "js/api-client.js",
    "js/banner-manager.js",
    "js/ticket-manager.js",
    "js/room-manager.js",
    "js/escalation-engine.js",
    "js/ui-controller.js",
    "js/app.js",
    "images/Vitrine.png",
    "images/SEA2.png",
    "images/SI.png",
    "images/SIM.png"
)

$missingFiles = @()
foreach ($file in $requiredFiles) {
    if (Test-Path $file) {
        Write-Host "‚úÖ $file" -ForegroundColor Green
    } else {
        Write-Host "‚ùå $file" -ForegroundColor Red
        $missingFiles += $file
    }
}

if ($missingFiles.Count -gt 0) {
    Write-Host "`n‚ö†Ô∏è Fichiers manquants d√©tect√©s:" -ForegroundColor Yellow
    foreach ($file in $missingFiles) {
        Write-Host "   - $file" -ForegroundColor Yellow
    }
    $continue = Read-Host "Voulez-vous continuer quand m√™me? (y/n)"
    if ($continue -ne "y") {
        exit 1
    }
}

# Ajouter tous les fichiers
Write-Host "`nüì§ Ajout des fichiers..." -ForegroundColor Green
git add .

# V√©rifier s'il y a des changements
$status = git status --porcelain
if ($status) {
    Write-Host "üìù Changements d√©tect√©s:" -ForegroundColor Yellow
    Write-Host $status -ForegroundColor Gray
    
    # Commit
    Write-Host "`nüíæ Cr√©ation du commit..." -ForegroundColor Green
    git commit -m $CommitMessage
    
    # Push
    Write-Host "`nüöÄ Push vers GitHub..." -ForegroundColor Green
    git push origin main
    
    Write-Host "`n‚úÖ D√©ploiement termin√©!" -ForegroundColor Green
    Write-Host "üåê URL: https://$GitHubUsername.github.io/$RepositoryName/" -ForegroundColor Cyan
    Write-Host "‚è±Ô∏è D√©ploiement en cours (2-3 minutes)..." -ForegroundColor Yellow
    
} else {
    Write-Host "`n‚ÑπÔ∏è Aucun changement d√©tect√©" -ForegroundColor Blue
    Write-Host "üåê URL actuelle: https://$GitHubUsername.github.io/$RepositoryName/" -ForegroundColor Cyan
}

# Instructions finales
Write-Host "`nüìã Instructions:" -ForegroundColor Cyan
Write-Host "1. V√©rifiez que GitHub Pages est activ√© dans les settings du repository" -ForegroundColor White
Write-Host "2. Attendez 2-3 minutes pour le d√©ploiement" -ForegroundColor White
Write-Host "3. Testez l'URL de production" -ForegroundColor White
Write-Host "4. Consultez les logs de d√©ploiement sur GitHub" -ForegroundColor White

Write-Host "`nüéØ Prochaines √©tapes:" -ForegroundColor Cyan
Write-Host "- Tester l'application en production" -ForegroundColor White
Write-Host "- Configurer un domaine personnalis√© si n√©cessaire" -ForegroundColor White
Write-Host "- Mettre en place des tests automatis√©s" -ForegroundColor White

Write-Host "`nüèÅ Script termin√©!" -ForegroundColor Green 